bin folder
==========

SixTrack
--------
In this repository we can fin the executable __"SixTrack_coll_fvlineal2"__ (you will have to make it executable with ``chmod`` (reminder of octal modes [here](http://en.wikipedia.org/wiki/Chmod#Octal_modes)). Execute it simply with:

```
./SixTrack_coll_fvlineal2
```
We can also find the _source code_, that we can check to see exactly what's going on: __"sixtrack.s_CC_block_vlineal_2"__.


###SixTrack input

Make sure the input files are in the same folder (or define the path of each of the files in your launching script, like __"myjob"__):

* __fc.2_nosep_allcc__: check [__ run_lsf_template__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/input#fort2) for more information.
* __fort.3_blockf__: check [__ run_lsf_template/input__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/input#fort3) for more information.
* __CC_dataf__ : check [__ run_lsf_template/DB__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/DB#cc_dataf) for more information.
* __CollDB.alltclp-tcld.b1.new__ : check [__ run_lsf_template/DB__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/DB#colldballtclp-tcldb1new) for more information.
* __CollPositions.alltclp-tcld.b1.dat__: check [__ run_lsf_template/DB__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/DB#collpositionsalltclp-tcldb1dat) for more information. 
* __SurveyWithCrossing_no-offset_lowb_B1.dat__: check [__ run_lsf_template/DB__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/DB#surveywithcrossing_no-offset_lowb_b1dat) for more information. 
* __allapert_ats_20121023__: check [__ run_lsf_template/DB__](https://github.com/KFubuki/Crab_Cavity_Simulations/tree/master/run_lsf_template/DB#allapert_ats_20121023b1-) for more information.

###SixTrack output

* __all_absorptions.dat__: absorbed particles.
* __all_impacts.dat__
* __amplitude2.dat__
* __amplitude.dat__
* __beta_beat.dat__
* __betafunctions.dat__
* __betatron.dat__
* __collgaps.dat__
* __collsettings.dat__
* __coll_summary.dat__: standard SixTrack summary output.
* __dist0.dat__: initial distribution.
* __distn.dat__: final distribution.
* __efficiency.dat__
* __FirstImpacts_AcceleratorFrame.dat__
* __FirstImpacts.dat__
* __FLUKA_impacts.dat__: inelastic impacts.
* __impact.dat__
* __orbitchecking.dat__
* __pencilbeam_distr.dat__
* __survival.dat__: number of particles that survive.
* __tracks2.dat__: file with all particle trajectories. The different columns are:

		1 -> Particle number
		2 -> Turn number
		3 -> Longitudinal coordinate (s) 
		4 -> Horizontal position (x)
		5 -> Horizontal derivative (x')
		6 -> Vertical position(y)
		7 -> Vertical derivative (y')
		8 -> Energy error
		9 -> Halo type flag

BeamLossPattern
---------------
> _BeamLossPattern_ is a program that calculates the location of particle losses along an accelerator. It relies on an aperture model of the full machine and takes as an input the particle coordinate as a function of the longitudinal coordinate (referred to as particle trajectories).
> Locations of beam losses are identified with a spatial resolution of 10 centimetres. For the 27 km long LHC ring, this is equivalent to checking 270000 loss locations! This is achieved by interpolating trajectories between to consecutive lattice elements (typical distance up to > 100 m).
> BeamLossPattern calculates the number of surviving turns before the halo particles hit the aperture. This is given as a standard output in the last column of the beam loss files.

More information can be found [here](http://lhc-collimation-project.web.cern.ch/lhc-collimation-project/BeamLossPattern.htm).

###How To Run BeamLossPattern

```
./BeamLossPattern Energy HaloFile OutputName ApertureFile
```
Where:

* ``Energy``:``inj`` or ``lowb``.
* ``HaloFile``: file with all the particle trajectories. It's an output file of SixTrack with the name __"tracks2.dat"__.
* ``OutputName``: type the desired name of the output files.
* ``ApertureFile``: aperture model file, normally with the name __"allaper.b1"__.

Example:

```
./BeamLossPattern lowb tracks2.dat test allapert.b1
```

###Input of BeamLossPattern

* __tracks2.dat__: generated by SixTrack.
* __allaper.b1__: database.

###Output of BeamLossPattern

* __LP_OutputName.s__: losses in the aperture, with resolution of 1 m.
* __LPI_OutputName.s__: losses in the aperture, with resolution of 10 cm.

> The output files has basically the same format has the input halo file. The only difference is that the last column now gives the number of surviving turns for each particle, i.e. the number of turn between the interaction with the primary collimators and the turn when the particle is lost.


CleanInelastic
--------------

> The SixTrack version with collimation can provide the locations of inelastic impacts of protons with the collimator jaws, which are used as an input for energy deposition studies. As discussed above, the SixTrack output can overestimate the number of impacts in a given collimator because it does not disregard the particles hitting the ring aperture before reaching the collimator (no aperture checks are carried out during the tracking). Similarly to CountAbs, CleanInelastic cleans up the "fake" inelastic impacts from the SixTrack output.

###How To Run CleanInelastic

```
./CleanInelastic ImpactFile LossFile CollPosition coll_summary.dat
```

Where:

* __``ImpactFile``__: SixTrack output with inelastic impacts, __"FLUKA_impacts.dat"__.
* __``LossFile``__: loss maps as produced by BeamLossPattern.
* __``CollPosition``__: file with the collimator positions.
* __``coll_summary.dat``__: standard SixTrack summary output.

###Input of CleanInelastic

* __FLUKA_impacts.dat__: generated by SixTrack.
* __coll_summary.dat__: generated by SixTrack.
* __LPI_OutputName.s__: generated by BeamLossPattern.
* __CollPositions.alltclp-tcld.b1.dat__: database.

###Output of CleanInelastic

* __impacts_fake.dat__
* __impacts_real.dat__